[package]
name = "vector"
version = "0.23.0"
authors = ["Vector Contributors <vector@datadoghq.com>"]
edition = "2021"
description = "A lightweight and ultra-fast tool for building observability pipelines"
homepage = "https://vector.dev"
license = "MPL-2.0"
readme = "README.md"
publish = false
default-run = "vector"
autobenches = false # our benchmarks are not runnable on their own either way
rust-version = "1.58.1"

[[bin]]
name = "graphql-schema"
path = "src/api/schema/gen.rs"
required-features = ["default-no-api-client"]

[[bin]]
name = "secret-backend-example"
path = "src/config/loading/secret_backend_example.rs"

[profile.dev]
split-debuginfo = "unpacked" # Faster debug builds on macOS

# CI-based builds use full release optimization.  See scripts/environment/release-flags.sh.
# This results in roughly a 5% reduction in performance when compiling locally vs when
# compiled via the CI pipeline.
[profile.release]
debug = false # Do not include debug symbols in the executable.

[profile.bench]
debug = true

[package.metadata.deb]
name = "vector"
section = "admin"
maintainer-scripts = "distribution/debian/scripts/"
conf-files = ["/etc/vector/vector.toml", "/etc/default/vector"]
assets = [
  ["target/release/vector", "/usr/bin/", "755"],
  ["config/vector.toml", "/etc/vector/vector.toml", "644"],
  ["config/examples/*", "/etc/vector/examples/", "644"],
  ["distribution/systemd/vector.service", "/lib/systemd/system/vector.service", "644"],
  ["distribution/systemd/vector.default", "/etc/default/vector", "600"]
]
license-file = ["target/debian-license.txt"]
extended-description-file = "target/debian-extended-description.txt"

[package.metadata.deb.systemd-units]
unit-scripts = "distribution/systemd/"
enable = false
start = false

# libc requirements are defined by `cross`
# https://github.com/rust-embedded/cross#supported-targets
# Though, it seems like aarch64 libc is actually 2.18 and not 2.19
[package.metadata.deb.variants.armv7-unknown-linux-gnueabihf]
depends = "libc6 (>= 2.15)"

[package.metadata.deb.variants.x86_64-unknown-linux-gnu]
depends = "libc6 (>= 2.15)"

[package.metadata.deb.variants.x86_64-unknown-linux-musl]
depends = ""

[package.metadata.deb.variants.aarch64-unknown-linux-gnu]
depends = "libc6 (>= 2.18)"

[package.metadata.deb.variants.aarch64-unknown-linux-musl]
depends = ""

[workspace]
members = [
  ".",
  "lib/codecs",
  "lib/enrichment",
  "lib/vector-buffers",
  "lib/vector-common",
  "lib/vector-config",
  "lib/vector-config-common",
  "lib/vector-config-macros",
  "lib/vector-core",
  "lib/dnsmsg-parser",
  "lib/fakedata",
  "lib/file-source",
  "lib/k8s-e2e-tests",
  "lib/k8s-test-framework",
  "lib/lookup",
  "lib/portpicker",
  "lib/prometheus-parser",
  "lib/tracing-limit",
  "lib/vector-api-client",
  "lib/value",
  "lib/vrl/cli",
  "lib/vrl/compiler",
  "lib/vrl/core",
  "lib/vrl/diagnostic",
  "lib/vrl/parser",
  "lib/vrl/stdlib",
  "lib/vrl/tests",
  "lib/vrl/proptests",
  "lib/vrl/vrl",
  "lib/vector-vrl-functions",
  "lib/datadog/grok",
  "lib/datadog/search-syntax",
  "lib/datadog/filter",
]

[dependencies]
# Internal libs
codecs = { path = "lib/codecs", default-features = false }
dnsmsg-parser = { path = "lib/dnsmsg-parser", optional = true }
enrichment = { path = "lib/enrichment" }
fakedata = { path = "lib/fakedata", optional = true }
file-source = { path = "lib/file-source", optional = true }
lookup = { path = "lib/lookup" }
portpicker = { path = "lib/portpicker" }
prometheus-parser = { path = "lib/prometheus-parser", optional = true }
tracing-limit = { path = "lib/tracing-limit" }
value = { path = "lib/value" }
vector_buffers = { path = "lib/vector-buffers", default-features = false }
vector_common = { path = "lib/vector-common" }
vector_core = { path = "lib/vector-core", default-features = false, features = ["vrl"] }
vector-api-client = { path = "lib/vector-api-client", optional = true }
vector-vrl-functions = { path = "lib/vector-vrl-functions" }
vrl-cli = { path = "lib/vrl/cli", optional = true }

# Tokio / Futures
async-stream = { version = "0.3.3", default-features = false }
async-trait = { version = "0.1.56", default-features = false }
futures = { version = "0.3.21", default-features = false, features = ["compat", "io-compat"], package = "futures" }
tokio = { version = "1.19.2", default-features = false, features = ["full"] }
tokio-openssl = { version = "0.6.3", default-features = false }
tokio-stream = { version = "0.1.9", default-features = false, features = ["net", "sync", "time"] }
tokio-util = { version = "0.7", default-features = false, features = ["io", "time"] }
console-subscriber = { version = "0.1.6", default-features = false, optional = true }

# Tracing
tracing = { version = "0.1.34", default-features = false }
tracing-core = { version = "0.1.26", default-features = false }
tracing-futures = { version = "0.2.5", default-features = false, features = ["futures-03"] }
tracing-subscriber = { version = "0.3.11", default-features = false, features = ["ansi", "env-filter", "fmt", "json", "registry", "tracing-log"] }
tracing-tower = { git = "https://github.com/tokio-rs/tracing", default-features = false, rev = "e0642d949891546a3bb7e47080365ee7274f05cd" }

# Metrics
metrics = { version = "0.17.1", default-features = false, features = ["std"] }
metrics-tracing-context = { version = "0.9.0", default-features = false }

# AWS - Official SDK
aws-config = { version = "0.12.0", default-features = false, features = ["rustls"], optional = true }
aws-types = { version = "0.12.0", default-features = false, features = ["hardcoded-credentials"], optional = true }
aws-sdk-s3 = { version = "0.12.0", default-features = false, features = ["rustls"], optional = true }
aws-sdk-sqs = { version = "0.12.0", default-features = false, features = ["rustls"], optional = true }
aws-sdk-cloudwatch = { version = "0.12.0", default-features = false, features = ["rustls"], optional = true }
aws-sdk-cloudwatchlogs = { version = "0.12.0", default-features = false, features = ["rustls"], optional = true }
aws-sdk-elasticsearch = {version = "0.12.0", default-features = false, features = ["rustls"], optional = true }
aws-sdk-firehose = { version = "0.12.0", default-features = false, features = ["rustls"], optional = true }
aws-sdk-kinesis = { version = "0.12.0", default-features = false, features = ["rustls"], optional = true }
aws-sigv4 = { version = "0.12.0", default-features = false, optional = true }
aws-smithy-async = { version = "0.42.0", default-features = false, optional = true }
aws-smithy-client = { version = "0.42.0", default-features = false, features = ["client-hyper"], optional = true}
aws-smithy-http = { version = "0.42.0", default-features = false, features = ["event-stream"], optional = true }
aws-smithy-http-tower = { version = "0.42.0", default-features = false, optional = true }
aws-smithy-types = { version = "0.42.0", default-features = false, optional = true }

# Azure
azure_core = { git = "https://github.com/Azure/azure-sdk-for-rust.git", rev = "b7171eb40909f7f2805f4622e076f8a6dbbe2d98", default-features = false, features = ["enable_reqwest"], optional = true }
azure_identity = { git = "https://github.com/Azure/azure-sdk-for-rust.git", rev = "b7171eb40909f7f2805f4622e076f8a6dbbe2d98", default-features = false, features = ["enable_reqwest"], optional = true }
azure_storage = { git = "https://github.com/Azure/azure-sdk-for-rust.git", rev = "b7171eb40909f7f2805f4622e076f8a6dbbe2d98", default-features = false, optional = true }
azure_storage_blobs = { git = "https://github.com/Azure/azure-sdk-for-rust.git", rev = "b7171eb40909f7f2805f4622e076f8a6dbbe2d98", default-features = false, optional = true }

# Tower
tower = { version = "0.4.12", default-features = false, features = ["buffer", "limit", "retry", "timeout", "util"] }
# Serde
serde = { version = "1.0.137", default-features = false, features = ["derive"] }
serde-toml-merge = { version = "0.3.0", default-features = false }
serde_bytes = { version = "0.11.6", default-features = false, features = ["std"], optional = true }
serde_json = { version = "1.0.81", default-features = false, features = ["raw_value"] }
serde_with = { version = "1.14.0", default-features = false, features = ["macros"], optional = true }
serde_yaml = { version = "0.8.24", default-features = false }

# Messagepack
rmp-serde = { version = "1.1.0", default-features = false, optional = true }
rmpv = { version = "1.0.0", default-features = false, features = ["with-serde"], optional = true }

# Prost
prost = { version = "0.10.4", default-features = false, features = ["std"] }
prost-types = { version = "0.10.1", default-features = false, optional = true }

# GCP
goauth = { version = "0.13.0", optional = true }
gouth = { version = "0.2.1", default-features = false, optional = true }
smpl_jwt = { version = "0.7.1", default-features = false, optional = true }

# API
async-graphql = { version = "4.0.1", default-features = false, optional = true, features = ["chrono"] }
async-graphql-warp = { version = "3.0.38", default-features = false, optional = true }
itertools = { version = "0.10.3", default-features = false, optional = true }

# API client
crossterm = { version = "0.23.2", default-features = false, features = ["event-stream"], optional = true }
num-format = { version = "0.4.0", default-features = false, features = ["with-num-bigint"], optional = true }
number_prefix = { version = "0.4.0", default-features = false, features = ["std"], optional = true }
tui = { version = "0.18.0", optional = true, default-features = false, features = ["crossterm"] }

# Datadog Pipelines
datadog-filter = { path = "lib/datadog/filter" }
datadog-search-syntax = { path = "lib/datadog/search-syntax" }
hex = { version = "0.4.3", default-features = false, optional = true }
sha2 = { version = "0.10.2", default-features = false, optional = true }

# VRL Lang
vrl = { path = "lib/vrl/vrl" }
vrl-stdlib = { path = "lib/vrl/stdlib" }

# External libs
arc-swap = { version = "1.5", default-features = false, optional = true }
async-compression = { version = "0.3.12", default-features = false, features = ["tokio", "gzip", "zstd"], optional = true }
avro-rs = { version = "0.13.0", default-features = false, optional = true }
axum = { version = "0.5.6", default-features = false }
base64 = { version = "0.13.0", default-features = false, optional = true }
bloom = { version = "0.3.2", default-features = false, optional = true }
bollard = { version = "0.12.0", default-features = false, features = ["ssl"] }
bytes = { version = "1.1.0", default-features = false, features = ["serde"] }
bytesize = { version = "1.1.0", default-features = false }
chrono = { version = "0.4.19", default-features = false, features = ["serde"] }
cidr-utils = { version = "0.5.7", default-features = false }
clap = { version = "3.1.18", default-features = false, features = ["derive", "env", "std"] }
colored = { version = "2.0.0", default-features = false }
csv = { version = "1.1", default-features = false, optional = true }
derivative = { version = "2.2.0", default-features = false }
dirs-next = { version = "2.0.0", default-features = false, optional = true }
dyn-clone = { version = "1.0.5", default-features = false }
encoding_rs = { version = "0.8.31", default-features = false, features = ["serde"] }
exitcode = { version = "1.1.2", default-features = false }
flate2 = { version = "1.0.24", default-features = false, features = ["default"] }
futures-util = { version = "0.3.21", default-features = false }
glob = { version = "0.3.0", default-features = false }
governor = { version = "0.4.1", default-features = false, features = ["dashmap", "jitter", "std"], optional = true }
grok = { version = "1.2.0", default-features = false, optional = true }
h2 = { version = "0.3.13", default-features = false, optional = true }
hash_hasher = { version = "2.0.0", default-features = false, optional  = true }
headers = { version = "0.3.6", default-features = false }
hostname = { version = "0.3.1", default-features = false }
http = { version = "0.2.6", default-features = false }
http-body = { version = "0.4.5", default-features = false }
hyper = { version = "0.14.19", default-features = false, features = ["client", "runtime", "http1", "http2", "server", "stream"] }
hyper-openssl = { version = "0.9.2", default-features = false }
hyper-proxy = { version = "0.9.1", default-features = false, features = ["openssl-tls"] }
indexmap = { version = "~1.8.2", default-features = false, features = ["serde"] }
infer = { version = "0.8.0", default-features = false, optional = true}
indoc = { version = "1.0.6", default-features = false }
inventory = { version = "0.1.10", default-features = false }
k8s-openapi = { version = "0.14.0", default-features = false, features = ["api", "v1_16"], optional = true }
kube = { version = "0.71.0", default-features = false, features = ["client", "rustls-tls", "runtime"], optional = true }
listenfd = { version = "1.0.0", default-features = false, optional = true }
logfmt = { version = "0.0.2", default-features = false, optional = true }
lru = { version = "0.7.6", default-features = false, optional = true }
maxminddb = { version = "0.23.0", default-features = false, optional = true }
md-5 = { version = "0.10", default-features = false, optional = true }
mongodb = { version = "2.2.2", default-features = false, features = ["tokio-runtime"], optional = true }
nats = { version = "0.20.1", default-features = false, optional = true }
nkeys = { version = "0.2.0", default-features = false, optional = true }
nom = { version = "7.1.1", default-features = false, optional = true }
notify = { version = "4.0.17", default-features = false }
num_cpus = { version = "1.13.1", default-features = false }
once_cell = { version = "1.12", default-features = false }
openssl = { version = "0.10.40", default-features = false, features = ["vendored"] }
openssl-probe = { version = "0.1.5", default-features = false }
ordered-float = { version = "3.0.0", default-features = false }
percent-encoding = { version = "2.1.0", default-features = false }
pin-project = { version = "1.0.10", default-features = false }
postgres-openssl = { version = "0.5.0", default-features = false, features = ["runtime"], optional = true }
pulsar = { version = "4.1", default-features = false, features = ["tokio-runtime"], optional = true }
rand = { version = "0.8.5", default-features = false, features = ["small_rng"] }
rand_distr = { version = "0.4.3", default-features = false }
rdkafka = { version = "0.27.0", default-features = false, features = ["tokio", "libz", "ssl", "zstd"], optional = true }
redis = { version = "0.21.5", default-features = false, features = ["connection-manager", "tokio-comp", "tokio-native-tls-comp"], optional = true }
regex = { version = "1.5.6", default-features = false, features = ["std", "perf"] }
roaring = { version = "0.9.0", default-features = false, optional = true }
seahash = { version = "4.1.0", default-features = false, optional = true }
semver = { version = "1.0.9", default-features = false, features = ["serde", "std"], optional = true }
smallvec = { version = "1", default-features = false, features = ["union"] }
snafu = { version = "0.7.1", default-features = false, features = ["futures"] }
snap = { version = "1.0.5", default-features = false, optional = true }
socket2 = { version = "0.4.4", default-features = false }
stream-cancel = { version = "0.8.1", default-features = false }
strip-ansi-escapes = { version = "0.1.1", default-features = false }
strum = { version = "0.24", default-features = false }
strum_macros = { version = "0.24", default-features = false }
syslog = { version = "6.0.1", default-features = false, optional = true }
tikv-jemallocator = { version = "0.5.0", default-features = false, optional = true }
tokio-postgres = { version = "0.7.6", default-features = false, features = ["runtime", "with-chrono-0_4"], optional = true }
tokio-tungstenite = {version = "0.17.1", default-features = false, features = ["connect"], optional = true}
toml = { version = "0.5.9", default-features = false }
tonic = { version = "0.7.2", optional = true, default-features = false, features = ["transport", "codegen", "prost", "tls", "tls-roots", "compression"] }
trust-dns-proto = { version = "0.21.0", default-features = false, features = ["dnssec"], optional = true }
typetag = { version = "0.1.8", default-features = false }
url = { version = "2.2.2", default-features = false, features = ["serde"] }
uuid = { version = "1", default-features = false, features = ["serde", "v4"] }
warp = { version = "0.3.1", default-features = false }

# depending on fork for bumped nix dependency
# https://github.com/heim-rs/heim/pull/360
heim = { git = "https://github.com/vectordotdev/heim.git", branch="update-nix", default-features = false, features = ["cpu", "disk", "host", "memory", "net"], optional = true }

# make sure to update the external docs when the Lua version changes
mlua = { version = "0.7.4", default-features = false, features = ["lua54", "send", "vendored"], optional = true }

[target.'cfg(windows)'.dependencies]
schannel = "0.1.20"
windows-service = "0.4.0"

[target.'cfg(target_os = "macos")'.dependencies]
security-framework = "2.6.1"

[target.'cfg(unix)'.dependencies]
atty = { version = "0.2.14", default-features = false }
nix = { version = "0.24.1", default-features = false, features = ["socket", "signal"] }

[build-dependencies]
prost-build = { version = "0.10.4", default-features = false, optional = true }
tonic-build = { version = "0.7", default-features = false, features = ["transport", "prost", "compression"], optional = true }

[dev-dependencies]
approx = "0.5.1"
assert_cmd = { version = "2.0.4", default-features = false }
azure_core = { git = "https://github.com/Azure/azure-sdk-for-rust.git", rev = "b7171eb40909f7f2805f4622e076f8a6dbbe2d98", default-features = false, features = ["enable_reqwest", "azurite_workaround"] }
azure_identity = { git = "https://github.com/Azure/azure-sdk-for-rust.git", rev = "b7171eb40909f7f2805f4622e076f8a6dbbe2d98", default-features = false, features = ["enable_reqwest"] }
azure_storage = { git = "https://github.com/Azure/azure-sdk-for-rust.git", rev = "b7171eb40909f7f2805f4622e076f8a6dbbe2d98", default-features = false, features = ["azurite_workaround"] }
azure_storage_blobs = { git = "https://github.com/Azure/azure-sdk-for-rust.git", rev = "b7171eb40909f7f2805f4622e076f8a6dbbe2d98", default-features = false, features = ["azurite_workaround"] }
base64 = "0.13.0"
criterion = { version = "0.3.5", features = ["html_reports", "async_tokio"] }
libc = "0.2.126"
pretty_assertions = "1.2.1"
proptest = "1.0"
quickcheck = "1.0.3"
reqwest = { version = "0.11", features = ["json"] }
tempfile = "3.3.0"
tokio = { version = "1.19.2", features = ["test-util"] }
tokio-test = "0.4.2"
tower-test = "0.4.0"
value = { path = "lib/value", features = ["test"] }
vector_core = { path = "lib/vector-core", default-features = false, features = ["vrl", "test"] }
wiremock = "0.5.13"

[patch.crates-io]
# A patch for lib/vector-core/buffers, addresses Issue 7514
leveldb-sys = { git = "https://github.com/vectordotdev/leveldb-sys.git", branch = "leveldb_mmap_limit" }
# Removes dependency on `time` v0.1
# https://github.com/chronotope/chrono/pull/578
chrono = { git = "https://github.com/vectordotdev/chrono.git", branch = "no-default-time" }
# Adds `Status::is_reset` test, remove after the next version is released.
h2 = { git = "https://github.com/hyperium/h2.git", rev = "f6aa3be6719270cd7b4094ee1940751b5f4ec88e" }

[features]
# Default features for *-unknown-linux-gnu and *-apple-darwin
default = ["api", "api-client", "enrichment-tables", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka/gssapi-vendored", "vrl-cli", "enterprise"]
# Default features for *-unknown-linux-* which make use of `cmake` for dependencies
default-cmake = ["api", "api-client", "enrichment-tables", "rdkafka/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka/gssapi-vendored", "vrl-cli", "enterprise"]
# Default features for *-pc-windows-msvc
# TODO: Enable SASL https://github.com/vectordotdev/vector/pull/3081#issuecomment-659298042
default-msvc = ["api", "api-client", "enrichment-tables", "rdkafka/cmake_build", "sinks", "sources", "transforms", "vrl-cli", "enterprise"]
default-musl = ["api", "api-client", "enrichment-tables", "rdkafka/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka/gssapi-vendored", "vrl-cli", "enterprise"]
default-no-api-client = ["api", "enrichment-tables", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka/gssapi-vendored", "vrl-cli", "enterprise"]
default-no-vrl-cli = ["api", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka/gssapi-vendored", "enterprise"]
tokio-console = ["console-subscriber", "tokio/tracing"]

all-logs = ["sinks-logs", "sources-logs", "sources-dnstap", "transforms-logs"]
all-metrics = ["sinks-metrics", "sources-metrics", "transforms-metrics", "enterprise"]

# Target specific release features.
# The `make` tasks will select this according to the appropriate triple.
# Use this section to turn off or on specific features for specific triples.
target-aarch64-unknown-linux-gnu = ["api", "api-client", "enrichment-tables", "rdkafka/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "vrl-cli", "enterprise"]
target-aarch64-unknown-linux-musl = ["api", "api-client", "enrichment-tables", "rdkafka/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "vrl-cli", "enterprise"]
target-armv7-unknown-linux-gnueabihf = ["api", "api-client", "enrichment-tables", "rdkafka/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "vrl-cli", "enterprise"]
target-armv7-unknown-linux-musleabihf = ["api", "api-client", "rdkafka/cmake_build", "enrichment-tables", "sinks", "sources", "sources-dnstap", "transforms", "vrl-cli", "enterprise"]
target-x86_64-unknown-linux-gnu = ["api", "api-client", "rdkafka/cmake_build", "enrichment-tables", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka/gssapi-vendored", "vrl-cli", "enterprise"]
target-x86_64-unknown-linux-musl = ["api", "api-client", "rdkafka/cmake_build", "enrichment-tables", "sinks", "sources", "sources-dnstap", "transforms", "unix", "vrl-cli", "enterprise"]
# Does not currently build
target-powerpc64le-unknown-linux-gnu = ["api", "api-client", "enrichment-tables", "rdkafka/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "vrl-cli", "enterprise"]
# Currently doesn't build due to lack of support for 64-bit atomics
target-powerpc-unknown-linux-gnu = ["api", "api-client", "enrichment-tables", "rdkafka/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "vrl-cli", "enterprise"]

# Enables features that work only on systems providing `cfg(unix)`
unix = ["tikv-jemallocator"]

# Enables kubernetes dependencies and shared code. Kubernetes-related sources,
# transforms and sinks should depend on this feature.
kubernetes = ["k8s-openapi", "kube"]

docker = ["dirs-next"]

# API
api = [
  "async-graphql",
  "async-graphql-warp",
  "base64",
  "itertools",
  "vector_core/api",
]

# API client
api-client = [
  "crossterm",
  "num-format",
  "number_prefix",
  "tui",
  "vector_core/api",
  "vector-api-client",
]

aws-core = [
  "aws-config",
  "aws-types",
  "aws-smithy-async",
  "aws-smithy-client",
  "aws-smithy-http",
  "aws-smithy-http-tower",
  "aws-smithy-types"
]

# Anything that requires Protocol Buffers.
protobuf-build = ["tonic-build", "prost-build"]

gcp = ["goauth", "smpl_jwt"]

# Enrichment Tables
enrichment-tables = ["enrichment-tables-file"]
enrichment-tables-file = [ "csv", "seahash", "hash_hasher" ]

# Sources
sources = ["sources-logs", "sources-metrics"]
sources-logs = [
  "sources-aws_kinesis_firehose",
  "sources-aws_s3",
  "sources-aws_sqs",
  "sources-datadog_agent",
  "sources-demo_logs",
  "sources-docker_logs",
  "sources-exec",
  "sources-file",
  "sources-fluent",
  "sources-gcp_pubsub",
  "sources-heroku_logs",
  "sources-http",
  "sources-internal_logs",
  "sources-journald",
  "sources-kafka",
  "sources-kubernetes_logs",
  "sources-logstash",
  "sources-nats",
  "sources-redis",
  "sources-socket",
  "sources-splunk_hec",
  "sources-stdin",
  "sources-syslog",
  "sources-vector",
]
sources-metrics = [
  "sources-apache_metrics",
  "sources-aws_ecs_metrics",
  "sources-eventstoredb_metrics",
  "sources-host_metrics",
  "sources-internal_metrics",
  "sources-mongodb_metrics",
  "sources-nginx_metrics",
  "sources-postgresql_metrics",
  "sources-prometheus",
  "sources-statsd",
  "sources-vector",
]

sources-apache_metrics = []
sources-aws_ecs_metrics = []
sources-aws_kinesis_firehose = ["base64", "infer", "sources-utils-tls"]
sources-aws_s3 = ["aws-core", "aws-sdk-sqs", "aws-sdk-s3", "semver", "async-compression", "sources-aws_sqs", "tokio-util/io"]
sources-aws_sqs = ["aws-core", "aws-sdk-sqs"]
sources-datadog_agent = ["sources-utils-tls", "sources-utils-http-error", "protobuf-build"]
sources-demo_logs = ["fakedata"]
sources-dnstap = ["base64", "trust-dns-proto", "dnsmsg-parser", "protobuf-build"]
sources-docker_logs = ["docker"]
sources-eventstoredb_metrics = []
sources-exec = []
sources-file = ["file-source"]
sources-fluent = ["base64", "listenfd", "tokio-util/net", "rmpv", "rmp-serde", "sources-utils-tcp-keepalive", "sources-utils-tcp-socket", "sources-utils-tls", "serde_bytes"]
sources-gcp_pubsub = ["gcp", "h2", "prost-types", "protobuf-build", "tonic"]
sources-heroku_logs = ["sources-utils-http", "sources-utils-http-query", "sources-http"]
sources-host_metrics = ["heim"]
sources-http = ["sources-utils-http", "sources-utils-http-query"]
sources-internal_logs = []
sources-internal_metrics = []
sources-journald = []
sources-kafka = ["rdkafka"]
sources-kubernetes_logs = ["file-source", "kubernetes", "transforms-merge", "transforms-regex_parser"]
sources-logstash = ["listenfd", "tokio-util/net", "sources-utils-tcp-keepalive", "sources-utils-tcp-socket", "sources-utils-tls"]
sources-mongodb_metrics = ["mongodb"]
sources-nats = ["nats", "nkeys"]
sources-nginx_metrics = ["nom"]
sources-postgresql_metrics = ["postgres-openssl", "tokio-postgres"]
sources-prometheus = ["prometheus-parser", "sinks-prometheus", "sources-http", "sources-utils-http"]
sources-redis= ["redis"]
sources-socket = ["listenfd", "tokio-util/net", "sources-utils-udp", "sources-utils-tcp-keepalive", "sources-utils-tcp-socket", "sources-utils-tls", "sources-utils-unix"]
sources-splunk_hec = ["sources-utils-tls", "roaring"]
sources-statsd = ["listenfd", "sources-utils-tcp-keepalive", "sources-utils-tcp-socket", "sources-utils-tls", "sources-utils-udp", "sources-utils-unix", "tokio-util/net"]
sources-stdin = ["tokio-util/io"]
sources-syslog = ["listenfd", "tokio-util/net", "sources-utils-udp", "sources-utils-tcp-keepalive", "sources-utils-tcp-socket", "sources-utils-tls", "sources-utils-unix", "codecs/syslog"]
sources-utils-http = ["snap", "sources-utils-tls", "sources-utils-http-auth", "sources-utils-http-encoding", "sources-utils-http-error", "sources-utils-http-prelude"]
sources-utils-http-auth = ["sources-utils-http-error"]
sources-utils-http-encoding = ["snap", "sources-utils-http-error"]
sources-utils-http-error = []
sources-utils-http-prelude = ["sources-utils-http", "sources-utils-tls", "sources-utils-http-auth", "sources-utils-http-encoding", "sources-utils-http-error"]
sources-utils-http-query = []
sources-utils-tcp-keepalive = []
sources-utils-tcp-socket = []
sources-utils-tls = []
sources-utils-udp = []
sources-utils-unix = []
sources-vector = ["listenfd", "sources-utils-tcp-keepalive", "sources-utils-tcp-socket", "sources-utils-tls", "tonic", "protobuf-build"]

# Transforms
transforms = ["transforms-logs", "transforms-metrics"]
transforms-logs = [
  "transforms-add_fields",
  "transforms-ansi_stripper",
  "transforms-aws_cloudwatch_logs_subscription_parser",
  "transforms-aws_ec2_metadata",
  "transforms-coercer",
  "transforms-concat",
  "transforms-dedupe",
  "transforms-field_filter",
  "transforms-filter",
  "transforms-geoip",
  "transforms-grok_parser",
  "transforms-json_parser",
  "transforms-key_value_parser",
  "transforms-log_to_metric",
  "transforms-logfmt_parser",
  "transforms-lua",
  "transforms-merge",
  "transforms-metric_to_log",
  "transforms-pipelines",
  "transforms-reduce",
  "transforms-regex_parser",
  "transforms-remap",
  "transforms-remove_fields",
  "transforms-rename_fields",
  "transforms-route",
  "transforms-sample",
  "transforms-split",
  "transforms-throttle",
  "transforms-tokenizer",
]
transforms-metrics = [
  "transforms-add_tags",
  "transforms-aggregate",
  "transforms-filter",
  "transforms-log_to_metric",
  "transforms-lua",
  "transforms-metric_to_log",
  "transforms-pipelines",
  "transforms-remap",
  "transforms-remove_tags",
  "transforms-tag_cardinality_limit",
  "transforms-throttle",
]

transforms-add_fields = []
transforms-add_tags = []
transforms-aggregate = []
transforms-ansi_stripper = []
transforms-aws_cloudwatch_logs_subscription_parser= []
transforms-aws_ec2_metadata = ["arc-swap"]
transforms-coercer = []
transforms-concat = []
transforms-dedupe = ["lru"]
transforms-field_filter = []
transforms-filter = []
transforms-geoip = ["maxminddb"]
transforms-grok_parser = ["grok"]
transforms-json_parser = []
transforms-key_value_parser = []
transforms-log_to_metric = []
transforms-logfmt_parser = ["logfmt"]
transforms-lua = ["mlua", "vector_core/lua"]
transforms-merge = []
transforms-metric_to_log = []
transforms-pipelines = ["transforms-filter", "transforms-route"]
transforms-reduce = []
transforms-regex_parser = []
transforms-remap = []
transforms-remove_fields = []
transforms-remove_tags = []
transforms-rename_fields = []
transforms-route = []
transforms-sample = ["seahash"]
transforms-split = []
transforms-tag_cardinality_limit = ["bloom"]
transforms-throttle = ["governor"]
transforms-tokenizer = []

# Sinks
sinks = ["sinks-logs", "sinks-metrics"]
sinks-logs = [
  "sinks-aws_cloudwatch_logs",
  "sinks-aws_kinesis_firehose",
  "sinks-aws_kinesis_streams",
  "sinks-aws_s3",
  "sinks-aws_sqs",
  "sinks-azure_blob",
  "sinks-azure_monitor_logs",
  "sinks-blackhole",
  "sinks-clickhouse",
  "sinks-console",
  "sinks-datadog_archives",
  "sinks-datadog_events",
  "sinks-datadog_logs",
  "sinks-datadog_traces",
  "sinks-elasticsearch",
  "sinks-file",
  "sinks-gcp",
  "sinks-honeycomb",
  "sinks-http",
  "sinks-humio",
  "sinks-influxdb",
  "sinks-kafka",
  "sinks-logdna",
  "sinks-loki",
  "sinks-nats",
  "sinks-new_relic_logs",
  "sinks-new_relic",
  "sinks-papertrail",
  "sinks-pulsar",
  "sinks-redis",
  "sinks-sematext",
  "sinks-socket",
  "sinks-splunk_hec",
  "sinks-vector",
  "sinks-websocket",
]
sinks-metrics = [
  "sinks-aws_cloudwatch_metrics",
  "sinks-blackhole",
  "sinks-console",
  "sinks-datadog_metrics",
  "sinks-humio",
  "sinks-influxdb",
  "sinks-kafka",
  "sinks-prometheus",
  "sinks-sematext",
  "sinks-statsd",
  "sinks-vector",
  "sinks-splunk_hec"
]

sinks-aws_cloudwatch_logs = ["aws-core", "aws-sdk-cloudwatchlogs"]
sinks-aws_cloudwatch_metrics = ["aws-core", "aws-sdk-cloudwatch"]
sinks-aws_kinesis_firehose = ["aws-core", "aws-sdk-firehose"]
sinks-aws_kinesis_streams = ["aws-core", "aws-sdk-kinesis"]
sinks-aws_s3 = ["base64", "md-5", "aws-core", "aws-sdk-s3"]
sinks-aws_sqs = ["aws-core", "aws-sdk-sqs"]
sinks-azure_blob = ["azure_core", "azure_identity", "azure_storage", "azure_storage_blobs"]
sinks-azure_monitor_logs = []
sinks-blackhole = []
sinks-clickhouse = []
sinks-console = []
sinks-datadog_archives = ["sinks-aws_s3", "sinks-azure_blob", "sinks-gcp"]
sinks-datadog_events = []
sinks-datadog_logs = []
sinks-datadog_metrics = ["protobuf-build", "sinks-azure_blob"]
sinks-datadog_traces = ["protobuf-build"]
sinks-elasticsearch = ["aws-core", "aws-sigv4", "transforms-metric_to_log"]
sinks-file = ["async-compression"]
sinks-gcp = ["base64", "gcp", "gouth"]
sinks-honeycomb = []
sinks-http = []
sinks-humio = ["sinks-splunk_hec", "transforms-metric_to_log"]
sinks-influxdb = []
sinks-kafka = ["rdkafka"]
sinks-logdna = []
sinks-loki = []
sinks-nats = ["nats", "nkeys"]
sinks-new_relic_logs = ["sinks-http"]
sinks-new_relic = []
sinks-papertrail = ["syslog"]
sinks-prometheus = ["prometheus-parser", "snap", "sources-utils-tls", "serde_with"]
sinks-pulsar = ["avro-rs", "pulsar"]
sinks-redis = ["redis"]
sinks-sematext = ["sinks-elasticsearch", "sinks-influxdb"]
sinks-socket = ["sinks-utils-udp"]
sinks-splunk_hec = []
sinks-statsd = ["sinks-utils-udp", "tokio-util/net"]
sinks-utils-udp = []
sinks-vector = ["sinks-utils-udp", "tonic", "protobuf-build"]
sinks-websocket = ["tokio-tungstenite"]

# Datadog integration
enterprise = [
  "hex",
  "sha2",
  "sinks-datadog_logs",
  "sinks-datadog_metrics",
  "sources-host_metrics",
  "sources-internal_logs",
  "sources-internal_metrics",
  "transforms-remap",
]

# Identifies that the build is a nightly build
nightly = []

# Testing-related features
all-integration-tests = [
  "aws-integration-tests",
  "azure-integration-tests",
  "clickhouse-integration-tests",
  "datadog-agent-integration-tests",
  "datadog-logs-integration-tests",
  "datadog-metrics-integration-tests",
  "datadog-traces-integration-tests",
  "docker-logs-integration-tests",
  "es-integration-tests",
  "eventstoredb_metrics-integration-tests",
  "fluent-integration-tests",
  "gcp-cloud-storage-integration-tests",
  "gcp-integration-tests",
  "gcp-pubsub-integration-tests",
  "humio-integration-tests",
  "influxdb-integration-tests",
  "kafka-integration-tests",
  "logstash-integration-tests",
  "loki-integration-tests",
  "mongodb_metrics-integration-tests",
  "nats-integration-tests",
  "nginx-integration-tests",
  "postgresql_metrics-integration-tests",
  "prometheus-integration-tests",
  "pulsar-integration-tests",
  "redis-integration-tests",
  "splunk-integration-tests",
  "dnstap-integration-tests",
]

aws-integration-tests = [
  "aws-cloudwatch-logs-integration-tests",
  "aws-cloudwatch-metrics-integration-tests",
  "aws-ec2-metadata-integration-tests",
  "aws-ecs-metrics-integration-tests",
  "aws-kinesis-firehose-integration-tests",
  "aws-kinesis-streams-integration-tests",
  "aws-s3-integration-tests",
  "aws-sqs-integration-tests",
]

azure-integration-tests = [
  "azure-blob-integration-tests"
]

aws-cloudwatch-logs-integration-tests = ["sinks-aws_cloudwatch_logs"]
aws-cloudwatch-metrics-integration-tests = ["sinks-aws_cloudwatch_metrics"]
aws-ec2-metadata-integration-tests = ["transforms-aws_ec2_metadata"]
aws-ecs-metrics-integration-tests = ["sources-aws_ecs_metrics"]
aws-kinesis-firehose-integration-tests = ["sinks-aws_kinesis_firehose", "aws-sdk-elasticsearch", "sinks-elasticsearch"]
aws-kinesis-streams-integration-tests = ["sinks-aws_kinesis_streams"]
aws-s3-integration-tests = ["sinks-aws_s3", "sources-aws_s3"]
aws-sqs-integration-tests = ["sinks-aws_sqs", "sources-aws_sqs"]
azure-blob-integration-tests = ["sinks-azure_blob"]
clickhouse-integration-tests = ["sinks-clickhouse"]
datadog-agent-integration-tests = ["sources-datadog_agent"]
datadog-logs-integration-tests = ["sinks-datadog_logs"]
datadog-metrics-integration-tests = ["sinks-datadog_metrics"]
datadog-traces-integration-tests = ["sinks-datadog_traces"]
docker-logs-integration-tests = ["sources-docker_logs", "unix"]
es-integration-tests = ["sinks-elasticsearch"]
eventstoredb_metrics-integration-tests = ["sources-eventstoredb_metrics"]
fluent-integration-tests = ["docker", "sources-fluent"]
gcp-cloud-storage-integration-tests = ["sinks-gcp"]
gcp-integration-tests = ["sinks-gcp"]
gcp-pubsub-integration-tests = ["sinks-gcp", "sources-gcp_pubsub"]
humio-integration-tests = ["sinks-humio"]
influxdb-integration-tests = ["sinks-influxdb"]
kafka-integration-tests = ["sinks-kafka", "sources-kafka"]
logstash-integration-tests = ["docker", "sources-logstash"]
loki-integration-tests = ["sinks-loki"]
mongodb_metrics-integration-tests = ["sources-mongodb_metrics"]
nats-integration-tests = ["sinks-nats", "sources-nats"]
nginx-integration-tests = ["sources-nginx_metrics"]
postgresql_metrics-integration-tests = ["sources-postgresql_metrics"]
prometheus-integration-tests = ["sinks-prometheus", "sources-prometheus"]
pulsar-integration-tests = ["sinks-pulsar"]
redis-integration-tests = ["sinks-redis", "sources-redis"]
splunk-integration-tests = ["sinks-splunk_hec"]
dnstap-integration-tests = ["sources-dnstap"]
disable-resolv-conf = []
shutdown-tests = ["api", "sinks-blackhole", "sinks-console", "sinks-prometheus", "sources", "transforms-log_to_metric", "transforms-lua", "transforms-remap", "unix"]
cli-tests = ["sinks-blackhole", "sinks-socket", "sources-demo_logs", "sources-file"]
vector-api-tests = [
  "sources-demo_logs",
  "transforms-log_to_metric",
  "transforms-remap",
  "sinks-blackhole"
]
vector-unit-test-tests = [
  "sources-demo_logs",
  "transforms-add_fields",
  "transforms-remap",
  "transforms-route",
  "transforms-filter",
  "transforms-reduce",
  "transforms-add_tags",
  "transforms-log_to_metric",
  "transforms-remove_fields",
  "sinks-console"
]
enterprise-tests = [
  "enterprise",
  "sources-demo_logs",
  "sinks-blackhole",
]

# grouping together features for benchmarks
# excluing API client due to running out of memory during linking in Github Actions
benches = [
  "sinks-file",
  "sinks-http",
  "sinks-socket",
  "sources-file",
  "sources-socket",
  "sources-syslog",
  "transforms-add_fields",
  "transforms-coercer",
  "transforms-field_filter",
  "transforms-json_parser",
  "transforms-lua",
  "transforms-rename_fields",
  "transforms-regex_parser",
  "transforms-sample",
  "transforms-split",
]
dnstap-benches = ["sources-dnstap"]
language-benches = ["sinks-socket", "sources-socket", "transforms-add_fields", "transforms-json_parser", "transforms-lua", "transforms-regex_parser", "transforms-remap"]
# Separate benching process for metrics due to the nature of the bootstrap procedures.
statistic-benches = []
metrics-benches = ["sinks-socket", "sources-socket"]
remap-benches = ["transforms-add_fields", "transforms-coercer", "transforms-json_parser", "transforms-remap"]
transform-benches = ["transforms-filter", "transforms-dedupe", "transforms-reduce", "transforms-route"]
codecs-benches = []
loki-benches = ["sinks-loki"]
enrichment-tables-benches = ["enrichment-tables-file"]

[[bench]]
name = "default"
harness = false
required-features = ["benches"]

[[bench]]
name = "dnstap"
path = "benches/dnstap/mod.rs"
harness = false
required-features = ["dnstap-benches"]

[[bench]]
name = "remap"
harness = false
required-features = ["remap-benches"]

[[bench]]
name = "enrichment_tables_file"
harness = false
required-features = ["enrichment-tables-benches"]

[[bench]]
name = "languages"
harness = false
required-features = ["language-benches"]

[[bench]]
name = "loki"
harness = false
required-features = ["loki-benches"]

[[bench]]
name = "distribution_statistic"
harness = false
required-features = ["statistic-benches"]

[[bench]]
name = "transform"
path = "benches/transform/main.rs"
harness = false
test = false
required-features = ["transform-benches"]

[[bench]]
name = "codecs"
path = "benches/codecs/main.rs"
harness = false
required-features = ["codecs-benches"]
